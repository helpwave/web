name: CICD tasks

on:
  push:
    branches:
      - '*'
    paths:
      - 'lib/**'
      - 'tasks/**'
      - 'pnpm*.yaml'
      - 'package*.json'
      - 'Dockerfile.tasks'
      - '.dockerignore'
      - '.github/workflows/**'
    tags:
      - 'v*'
  pull_request:
    paths:
      - 'lib/**'
      - 'tasks/**'
      - 'pnpm*.yaml'
      - 'package*.json'
      - 'Dockerfile.tasks'
      - '.dockerignore'
      - '.github/workflows/**'

jobs:

  build:
    name: Build docker image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    outputs:
      IMAGE: ${{ env.IMAGE_NAME }}@${{ steps.docker-build-and-push.outputs.digest }}

    steps:
      - uses: actions/checkout@v3

      - name: Lowercase github.repository_owner
        run: |
          echo "REPOSITORY_OWNER_LC=${REPOSITORY_OWNER,,}" >>${GITHUB_ENV}
        env:
          REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Image name
        run: |
          echo "IMAGE_NAME=ghcr.io/${{ env.REPOSITORY_OWNER_LC }}/web-app" >>${GITHUB_ENV}

      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=edge
            type=ref,event=pr
            type=ref,event=branch,prefix=branch-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - id: commit
        uses: pr-mpt/actions-commit-hash@v2
        with:
          commit: "${{ github.sha }}"

      - name: Build
        uses: docker/build-push-action@v4
        id: docker-build-and-push
        with:
          context: .
          file: Dockerfile.tasks
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            VERSION=${{ steps.commit.outputs.short }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Check manifest
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  deploy:
    name: Deploy to cluster
    runs-on: ubuntu-latest
    environment: staging
    needs: build
    if: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}

    permissions:
      contents: read
      packages: read

    steps:
      - name: Authenticate against GCP
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ vars.GKE_NAME }}
          location: ${{ vars.GKE_ZONE }}

      - name: Deploy
        run: |-
          kubectl patch --namespace $DEPLOYMENT_NAMESPACE deployment/$DEPLOYMENT_NAME --patch '{"spec":{"template":{"spec":{"containers":[{"name":"'$CONTAINER_NAME'", "image":"'$CONTAINER_IMAGE'"}]}}}}'
          kubectl rollout status --namespace $DEPLOYMENT_NAMESPACE deployment/$DEPLOYMENT_NAME
        env:
          DEPLOYMENT_NAMESPACE: ${{ vars.DEPLOYMENT_NAMESPACE }}
          DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }}
          CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
          CONTAINER_IMAGE: ${{ needs.build.outputs.IMAGE }}
